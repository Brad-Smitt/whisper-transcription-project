#!/usr/bin/env python3
"""
Application Gradio Whisper
Une application Gradio simple pour la transcription audio utilisant OpenAI's Whisper.
"""

import gradio as gr
import whisper
import tempfile
import os
import json
from pathlib import Path
from typing import Dict, Any

class WhisperGradioApp:
    def __init__(self):
        """Initialiser l'application Gradio."""
        self.model = None
        self.current_model_name = None
    
    def load_model(self, model_name: str):
        """Charger le mod√®le Whisper."""
        if self.current_model_name != model_name:
            print(f"Chargement du mod√®le {model_name}...")
            self.model = whisper.load_model(model_name)
            self.current_model_name = model_name
            print(f"‚úÖ Mod√®le {model_name} charg√© !")
        return f"‚úÖ Mod√®le {model_name} charg√© !"
    
    def transcribe_audio(self, audio_file, model_name, task, language, temperature, word_timestamps):
        """Transcrire un fichier audio."""
        try:
            # Charger le mod√®le si n√©cessaire
            self.load_model(model_name)
            
            # Pr√©parer les options
            options = {
                "task": task,
                "temperature": temperature,
                "word_timestamps": word_timestamps
            }
            
            if language and language != "D√©tection automatique":
                # Convertir les noms de langues en codes
                language_codes = {
                    "Fran√ßais": "fr",
                    "Anglais": "en",
                    "Espagnol": "es",
                    "Allemand": "de",
                    "Italien": "it",
                    "Portugais": "pt",
                    "Russe": "ru",
                    "Japonais": "ja",
                    "Cor√©en": "ko",
                    "Chinois": "zh"
                }
                options["language"] = language_codes.get(language, language)
            
            # Transcrire
            result = self.model.transcribe(audio_file.name, **options)
            
            # Formater la sortie
            output = {
                "text": result["text"],
                "language": result.get("language", "Inconnue"),
                "segments": len(result.get("segments", [])),
                "duration": result["segments"][-1]["end"] if result.get("segments") else 0
            }
            
            # Cr√©er le texte format√© pour l'affichage
            info_text = f"üåç Langue d√©tect√©e : {output['language']}\n"
            info_text += f"üìä Nombre de segments : {output['segments']}\n"
            info_text += f"‚è±Ô∏è Dur√©e : {output['duration']:.2f} secondes"
            
            return (
                result["text"],
                info_text,
                json.dumps(result, indent=2, ensure_ascii=False)
            )
            
        except Exception as e:
            return f"Erreur : {str(e)}", "", ""
    
    def create_interface(self):
        """Cr√©er l'interface Gradio."""
        
        # Composants de l'interface
        with gr.Blocks(title="Transcription Whisper", theme=gr.themes.Soft()) as interface:
            
            gr.Markdown("# üé§ Application de Transcription Whisper")
            gr.Markdown("D√©posez un fichier audio et obtenez des transcriptions pr√©cises avec le mod√®le Whisper d'OpenAI.")
            
            with gr.Row():
                with gr.Column(scale=2):
                    # Composants d'entr√©e
                    audio_input = gr.Audio(
                        label="üìÅ D√©poser le Fichier Audio",
                        type="filepath",
                        source="upload"
                    )
                    
                    with gr.Row():
                        model_dropdown = gr.Dropdown(
                            choices=["tiny", "base", "small", "medium", "large"],
                            value="base",
                            label="ü§ñ Mod√®le",
                            info="Les mod√®les plus grands sont plus pr√©cis mais plus lents"
                        )
                        
                        task_dropdown = gr.Dropdown(
                            choices=["transcribe", "translate"],
                            value="transcribe",
                            label="üéØ T√¢che",
                            info="Transcrire ou traduire en anglais"
                        )
                    
                    with gr.Row():
                        language_dropdown = gr.Dropdown(
                            choices=["D√©tection automatique", "Fran√ßais", "Anglais", "Espagnol", "Allemand", "Italien", "Portugais", "Russe", "Japonais", "Cor√©en", "Chinois"],
                            value="D√©tection automatique",
                            label="üåç Langue",
                            info="S√©lectionner la langue ou laisser la d√©tection automatique"
                        )
                        
                        temperature_slider = gr.Slider(
                            minimum=0.0,
                            maximum=1.0,
                            value=0.0,
                            step=0.1,
                            label="üå°Ô∏è Temp√©rature",
                            info="Valeurs plus √©lev√©es rendent la sortie plus al√©atoire"
                        )
                    
                    word_timestamps_checkbox = gr.Checkbox(
                        label="‚è±Ô∏è Horodatage au niveau des mots",
                        value=False,
                        info="Inclure les horodatages pour chaque mot"
                    )
                    
                    transcribe_button = gr.Button("üéØ Transcrire", variant="primary", size="lg")
                
                with gr.Column(scale=2):
                    # Composants de sortie
                    text_output = gr.Textbox(
                        label="üìù Texte Transcrit",
                        lines=10,
                        placeholder="La transcription appara√Ætra ici..."
                    )
                    
                    info_output = gr.Textbox(
                        label="‚ÑπÔ∏è Informations",
                        lines=3,
                        placeholder="Informations suppl√©mentaires..."
                    )
                    
                    json_output = gr.Code(
                        label="üìä R√©sultat JSON Complet",
                        language="json",
                        lines=20
                    )
            
            # Gestionnaires d'√©v√©nements
            transcribe_button.click(
                fn=self.transcribe_audio,
                inputs=[
                    audio_input,
                    model_dropdown,
                    task_dropdown,
                    language_dropdown,
                    temperature_slider,
                    word_timestamps_checkbox
                ],
                outputs=[text_output, info_output, json_output]
            )
            
            # Exemples
            gr.Examples(
                examples=[
                    ["exemple_audio.wav", "base", "transcribe", "D√©tection automatique", 0.0, False],
                ],
                inputs=[
                    audio_input,
                    model_dropdown,
                    task_dropdown,
                    language_dropdown,
                    temperature_slider,
                    word_timestamps_checkbox
                ],
                outputs=[text_output, info_output, json_output],
                fn=self.transcribe_audio,
                cache_examples=True
            )
            
            # Pied de page
            gr.Markdown("""
            ---
            ### üìö Conseils d'Utilisation
            
            - **Mod√®les Tiny/Base** : Plus rapides mais moins pr√©cis
            - **Mod√®le Large** : Plus pr√©cis mais plus lent
            - **D√©tection automatique** : Fonctionne bien pour la plupart des langues
            - **Horodatage des mots** : Utile pour la cr√©ation de sous-titres
            - Formats support√©s : WAV, MP3, M4A, FLAC, OGG
            
            ### üîß Fonctionnalit√©s Avanc√©es
            
            - **Temp√©rature** : Contr√¥le la randomisation de la sortie
            - **S√©lection de langue** : Peut am√©liorer la pr√©cision pour des langues sp√©cifiques
            - **Traduction** : Traduire automatiquement en anglais
            - **Horodatage des mots** : Obtenir un timing pr√©cis pour chaque mot
            """)
        
        return interface

def main():
    """Fonction principale pour lancer l'application Gradio."""
    app = WhisperGradioApp()
    interface = app.create_interface()
    
    # Lancer l'application
    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True,
        show_error=True
    )

if __name__ == "__main__":
    main() 